/*
SQLyog Ultimate v11.24 (64 bit)
MySQL - 5.7.24 : Database - nebs_nacos
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`nebs_nacos` /*!40100 DEFAULT CHARACTER SET latin1 */;

USE `nebs_nacos`;

/*Table structure for table `config_info` */

DROP TABLE IF EXISTS `config_info`;

CREATE TABLE `config_info` (
                               `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
                               `data_id` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'data_id',
                               `group_id` varchar(255) COLLATE utf8_bin DEFAULT NULL,
                               `content` longtext COLLATE utf8_bin NOT NULL COMMENT 'content',
                               `md5` varchar(32) COLLATE utf8_bin DEFAULT NULL COMMENT 'md5',
                               `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '创建时间',
                               `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '修改时间',
                               `src_user` text COLLATE utf8_bin COMMENT 'source user',
                               `src_ip` varchar(20) COLLATE utf8_bin DEFAULT NULL COMMENT 'source ip',
                               `app_name` varchar(128) COLLATE utf8_bin DEFAULT NULL,
                               `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
                               `c_desc` varchar(256) COLLATE utf8_bin DEFAULT NULL,
                               `c_use` varchar(64) COLLATE utf8_bin DEFAULT NULL,
                               `effect` varchar(64) COLLATE utf8_bin DEFAULT NULL,
                               `type` varchar(64) COLLATE utf8_bin DEFAULT NULL,
                               `c_schema` text COLLATE utf8_bin,
                               PRIMARY KEY (`id`) USING BTREE,
                               UNIQUE KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=99 DEFAULT CHARSET=utf8 COLLATE=utf8_bin ROW_FORMAT=DYNAMIC COMMENT='config_info';

/*Data for the table `config_info` */

insert  into `config_info`(`id`,`data_id`,`group_id`,`content`,`md5`,`gmt_create`,`gmt_modified`,`src_user`,`src_ip`,`app_name`,`tenant_id`,`c_desc`,`c_use`,`effect`,`type`,`c_schema`) values (86,'nebs-auth.yaml','DEFAULT_GROUP','server:\r\n  port: 8101\r\n  servlet:\r\n    context-path: /auth\r\nspring:\r\n  datasource:\r\n    dynamic:\r\n      hikari:\r\n        connection-timeout: 30000\r\n        max-lifetime: 1800000\r\n        max-pool-size: 15\r\n        min-idle: 5\r\n        connection-test-query: select 1\r\n        pool-name: NebsHikariCP\r\n      primary: base\r\n      datasource:\r\n        base:\r\n          username: root\r\n          password: 123456\r\n          driver-class-name: com.mysql.cj.jdbc.Driver\r\n          url: jdbc:mysql://${mysql.url}:3306/nebs_cloud_base?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2b8\r\n  redis:\r\n    database: 0\r\n    host: ${redis.url}\r\n    port: 6379\r\n    password: number47\r\n    lettuce:\r\n      pool:\r\n        min-idle: 8\r\n        max-idle: 500\r\n        max-active: 2000\r\n        max-wait: 10000\r\n      timeout: 5000\r\n  boot:\r\n    admin:\r\n      client:\r\n        url: http://${nebs-monitor-admin}:8401\r\n        username: nebs\r\n        password: 123456\r\n      instance:\r\n        prefer-ip: true\r\n        service-url: http://${nebs-auth}:8101\r\ninfo:\r\n  app:\r\n    name: ${spring.application.name}\r\n    description: \"@project.description@\"\r\n    version: \"@project.version@\"\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\' #将Spring Boot Admin客户端的所有监控端点都暴露给Spring Boot Admin服务端；\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS #总是展示详细的健康信息\r\n\r\n\r\nmybatis-plus:\r\n  type-aliases-package: entity.system #指定别名扫描路径，这个路径后续在nebs-common模块里定义，该路径下的实体类将自动配置别名，默认为类名首字母小写。配置别名后，便可以直接在MyBatis XML文件里使用了\r\n  mapper-locations: classpath:mapper/*.xml  #指定MyBatis XML文件路径\r\n  configuration:\r\n    jdbc-type-for-null: null #指定为null，否则再插入空值时会报“无效的列类型”错误；\r\n  global-config:\r\n    banner: false #设置为false关闭MyBatis Plus Banner打印\r\nlogging:\r\n  level:\r\n    org:\r\n      springframework:\r\n        boot:\r\n          actuate:\r\n            endpoint:\r\n              EndpointId: debug\r\n    com:\r\n      alibaba:\r\n          nacos:\r\n            client:\r\n              naming: warn','dfc773f7898867141a10d53f0ced7359','2022-01-12 04:25:21','2022-01-12 17:34:46',NULL,'192.168.33.1','NEBS-AUTH','','nebs-auth','null','null','yaml','null'),(88,'nebs-gateway.yaml','DEFAULT_GROUP','server:\r\n  port: 8301\r\n\r\nspring:\r\n  application:\r\n    name: NEBS-GATEWAY\r\n  autoconfigure:\r\n    exclude: org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\r\n                    org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration\r\n  boot:\r\n    admin:\r\n      client:\r\n        url: http://${nebs-monitor-admin}:8401\r\n        username: nebs\r\n        password: 123456\r\n      instance:\r\n        prefer-ip: true\r\n        service-url: http://${nebs-gateway}:8301\r\ninfo:\r\n  app:\r\n    name: ${spring.application.name}\r\n    description: \"@project.description@\"\r\n    version: \"@project.version@\"\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\' #将Spring Boot Admin客户端的所有监控端点都暴露给Spring Boot Admin服务端；\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS #总是展示详细的健康信息\r\neureka:\r\n  instance:\r\n    lease-renewal-interval-in-seconds: 20\r\n  client:\r\n    register-with-eureka: true\r\n    fetch-registry: true\r\n    instance-info-replication-interval-seconds: 30\r\n    registry-fetch-interval-seconds: 3\r\n    serviceUrl:\r\n      defaultZone: http://nebs:123456@${nebs-register}:8001/register/eureka/\r\nzuul:\r\n  SendErrorFilter: #让默认的异常过滤器失效，使用自定义异常过滤器\r\n    error:\r\n      disable: true\r\n  routes:\r\n    auth:\r\n      path: /auth/**\r\n      serviceId: NEBS-AUTH   #所有以/auth开头的请求都会被转发到名称为NEBS-Auth的服务上\r\n      sensitiveHeaders: \"*\"  #表示不过滤请求头信息,即请求的请求头信息将原封不动的转发出去\r\n    system:\r\n      path: /system/**\r\n      serviceId: NEBS-SERVER-SYSTEM\r\n      sensitiveHeaders: \"*\"\r\n    test:\r\n      path: /test/**\r\n      serviceId: NEBS-SERVER-TEST\r\n      sensitiveHeaders: \"*\"\r\n  retryable: true            #设置为true时，表示开启重试机制\r\n  ignored-services: \"*\"      #Zuul配合Eureka后会有一套默认的配置规则，这里我们只想请求根据我们显示配置的路由规则走，所以设置为*，表示关闭所有默认路由配置规则\r\n  ribbon:\r\n    eager-load:\r\n      enabled: true          #Zuul内部通过Ribbon按照一定的负载均衡算法来获取服务，Ribbon进行客户端负载均衡的Client并不是在服务启动的时候就初始化好的，\r\n                             #而是在调用的时候才会去创建相应的Client，所以第一次调用的耗时不仅仅包含发送HTTP请求的时间，\r\n                             #还包含了创建RibbonClient的时间，这样一来如果创建时间速度较慢，同时设置的超时时间又比较短的话，\r\n                             #第一次请求很容易出现超时的情况。设置为true的时候表示开启Ribbon的饥饿加载模式，即在应用启动的时候就去获取相应的Client备用\r\n\r\nribbon:\r\n  ReadTimeout: 3000          #设置请求超时时间，单位为毫秒\r\n','f82f7a2142c59134c60a69a5be602043','2022-01-12 16:27:42','2022-01-12 16:27:42',NULL,'192.168.33.1','nebs-gateway','','nebs-gateway',NULL,NULL,'yaml',NULL),(89,'nebs-monitor-admin.yaml','DEFAULT_GROUP','server:\r\n  port: 8401\r\n\r\nspring:\r\n  application:\r\n    name: NEBS-MONITOR-ADMIN\r\n  security:\r\n    user:\r\n      name: nebs\r\n      password: 123456\r\n  boot:\r\n    admin:\r\n      ui:\r\n        title: ${spring.application.name}\r\n      instance:\r\n        prefer-ip: true\r\n        service-url: http://${nebs-monitor-admin}:8401\r\n\r\n','8f1aa36ada7d84ff2e1dad4ad4e8f59c','2022-01-12 16:29:05','2022-01-12 16:29:05',NULL,'192.168.33.1','nebs-monitor-admin','','nebs-monitor-admin',NULL,NULL,'yaml',NULL),(90,'nebs-server-system.yaml','DEFAULT_GROUP','server:\r\n  port: 8201\r\n  servlet:\r\n    context-path: /system\r\n\r\nspring:\r\n  application:\r\n    name: NEBS-SERVER-SYSTEM\r\n  autoconfigure:\r\n    exclude: org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration\r\n  datasource:\r\n    dynamic:\r\n      p6spy: true\r\n      hikari:\r\n        connection-timeout: 30000\r\n        max-lifetime: 1800000\r\n        max-pool-size: 15\r\n        min-idle: 5\r\n        connection-test-query: select 1\r\n        pool-name: NebsHikariCP\r\n      primary: base\r\n      datasource:\r\n        base:\r\n          username: root\r\n          password: 123456\r\n          driver-class-name: com.mysql.cj.jdbc.Driver\r\n          url: jdbc:mysql://${mysql.url}:3306/nebs_cloud_base?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2b8\r\n  boot:\r\n    admin:\r\n      client:\r\n        url: http://${nebs-monitor-admin}:8401\r\n        username: nebs\r\n        password: 123456\r\n      instance:\r\n        prefer-ip: true\r\n        service-url: http://${nebs-server-system}:8201\r\n  zipkin:\r\n    sender:\r\n      type: rabbit\r\n  sleuth:\r\n    sampler:\r\n      probability: 1\r\n  rabbitmq:\r\n    host: ${rabbitmq.url}\r\n    port: 5672\r\n    username: nebs\r\n    password: 123456\r\ninfo:\r\n  app:\r\n    name: ${spring.application.name}\r\n    description: \"@project.description@\"\r\nversion: \"@project.version@\"\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\' #将Spring Boot Admin客户端的所有监控端点都暴露给Spring Boot Admin服务端；\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS #总是展示详细的健康信息\r\nsecurity:\r\n  oauth2:\r\n    resource:\r\n      id: ${spring.application.name}\r\n      user-info-uri: http://${nebs-gateway}:8301/auth/user  #1.到认证服务器里校验当前请求头中的令牌是否为合法的令牌；\r\n                                                      #2.通过当前令牌获取对应的用户信息。\r\n\r\neureka:\r\n  instance:\r\n    lease-renewal-interval-in-seconds: 20\r\n  client:\r\n    register-with-eureka: true\r\n    fetch-registry: true\r\n    instance-info-replication-interval-seconds: 30\r\n    serviceUrl:\r\n      defaultZone: http://nebs:123456@${nebs-register}:8001/register/eureka/\r\n\r\nmybatis-plus:\r\n  type-aliases-package: entity.system\r\n  mapper-locations: classpath:mapper/*/*.xml\r\n  configuration:\r\n    jdbc-type-for-null: null\r\n  global-config:\r\n    banner: false\r\n','1d1e355c18c3f08be90b6d2a973a8b0b','2022-01-12 16:30:05','2022-01-12 17:36:27',NULL,'192.168.33.1','nebs-server-system','','nebs-server-system','null','null','yaml','null'),(91,'nebs-server-test.yaml','DEFAULT_GROUP','server:\r\n  port: 8202\r\n  servlet:\r\n    context-path: /test\r\n\r\nspring:\r\n  application:\r\n    name: NEBS-SERVER-TEST\r\n  autoconfigure:\r\n    exclude: org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\r\n                   com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration,\r\n                   org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration\r\n  boot:\r\n    admin:\r\n      client:\r\n        url: http://${nebs-monitor-admin}:8401\r\n        username: nebs\r\n        password: 123456\r\n  zipkin:\r\n    sender:\r\n      type: rabbit #指定了使用RabbitMQ收集追踪信息\r\n  sleuth:\r\n    sampler:\r\n      probability: 1 #默认值为0.1，即采样率才1/10，发送10笔请求只有一笔会被采集。为了测试方便，我们可以将它设置为1，即100%采样；\r\n  rabbitmq:\r\n    host: ${rabbitmq.url}\r\n    port: 5672  #5672是RabbitMQ的管理页面端口，5672是AMPQ端口\r\n    username: nebs\r\n    password: 123456\r\n\r\ninfo:\r\n  app:\r\n    name: ${spring.application.name}\r\n    description: \"@project.description@\"\r\n    version: \"@project.version@\"\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\' #将Spring Boot Admin客户端的所有监控端点都暴露给Spring Boot Admin服务端；\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS #总是展示详细的健康信息\r\n\r\neureka:\r\n  instance:\r\n    lease-renewal-interval-in-seconds: 20\r\n  client:\r\n    register-with-eureka: true\r\n    fetch-registry: true\r\n    instance-info-replication-interval-seconds: 30\r\n    registry-fetch-interval-seconds: 3\r\n    serviceUrl:\r\n      defaultZone: http://nebs:123456@${nebs-register}:8001/register/eureka/\r\nsecurity:\r\n  oauth2:\r\n    resource:\r\n      id: ${spring.application.name}\r\n      user-info-uri: http://${nebs-gateway}:8301/auth/user\r\nfeign:\r\n  hystrix:\r\n    enabled: true\r\nhystrix:\r\n  shareSecurityContext: true #把SecurityContext对象从你当前主线程传输到Hystrix线程\r\n','7af9bef12df4748d9bfef21e59ffe1b0','2022-01-12 16:30:57','2022-01-12 17:36:47',NULL,'192.168.33.1','nebs-server-test','','nebs-server-test','null','null','yaml','null'),(92,'nebs-spring-gateway.yaml','DEFAULT_GROUP','server:\r\n  port: 8301\r\nspring:\r\n  main:\r\n    allow-bean-definition-overriding: true\r\n  cloud: ## 路由规则\r\n    gateway:\r\n      routes:\r\n        - id: NEBS-AUTH\r\n          uri: lb://NEBS-AUTH\r\n          predicates:\r\n            - Path=/auth/**\r\n        - id: NEBS-SERVER-SYSTEM\r\n          uri: lb://NEBS-SERVER-SYSTEM\r\n          predicates:\r\n            - Path=/system/**\r\n        - id: NEBS-SERVER-TEST\r\n          uri: lb://NEBS-SERVER-TEST #uri配置为lb://NEBS-Server-Test的含义是，满足转发条件后，请求将均衡的转发到NEBS-Server-Test微服务上\r\n          predicates:\r\n            - Path=/test/** #请求Path以/auth开头的都会被匹配\r\n      default-filters:\r\n        - StripPrefix=0 #请求转发前，将Path的内容截去前面一位,比如/auth/hello会被截取为/hello\r\n  boot:\r\n    admin:\r\n      client:\r\n        url: http://${nebs-monitor-admin}:8401\r\n        username: nebs\r\n        password: 123456\r\n\r\n#eureka:\r\n#  instance:\r\n#    lease-renewal-interval-in-seconds: 20\r\n#  client:\r\n#    register-with-eureka: true\r\n#    fetch-registry: true\r\n#    instance-info-replication-interval-seconds: 30\r\n#    registry-fetch-interval-seconds: 3\r\n#    serviceUrl:\r\n#      defaultZone: http://nebs:123456@${nebs-register}:8001/register/eureka/\r\n\r\nmanagement:\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: health,info,gateway\r\nlogging:\r\n  level:\r\n    org:\r\n      springframework:\r\n        boot:\r\n          actuate:\r\n            endpoint:\r\n              EndpointId: debug\r\n        data:\r\n          convert:\r\n            CustomConversions: debug\r\n','8084975ecc18a8148f9c59d23d25104f','2022-01-12 16:31:32','2022-01-12 17:13:39',NULL,'192.168.33.1','nebs-spring-gateway','','nebs-spring-gateway','null','null','yaml','null');

/*Table structure for table `config_info_aggr` */

DROP TABLE IF EXISTS `config_info_aggr`;

CREATE TABLE `config_info_aggr` (
                                    `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
                                    `data_id` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'data_id',
                                    `group_id` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'group_id',
                                    `datum_id` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'datum_id',
                                    `content` longtext COLLATE utf8_bin NOT NULL COMMENT '内容',
                                    `gmt_modified` datetime NOT NULL COMMENT '修改时间',
                                    `app_name` varchar(128) COLLATE utf8_bin DEFAULT NULL,
                                    `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
                                    PRIMARY KEY (`id`) USING BTREE,
                                    UNIQUE KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin ROW_FORMAT=DYNAMIC COMMENT='增加租户字段';

/*Data for the table `config_info_aggr` */

/*Table structure for table `config_info_beta` */

DROP TABLE IF EXISTS `config_info_beta`;

CREATE TABLE `config_info_beta` (
                                    `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
                                    `data_id` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'data_id',
                                    `group_id` varchar(128) COLLATE utf8_bin NOT NULL COMMENT 'group_id',
                                    `app_name` varchar(128) COLLATE utf8_bin DEFAULT NULL COMMENT 'app_name',
                                    `content` longtext COLLATE utf8_bin NOT NULL COMMENT 'content',
                                    `beta_ips` varchar(1024) COLLATE utf8_bin DEFAULT NULL COMMENT 'betaIps',
                                    `md5` varchar(32) COLLATE utf8_bin DEFAULT NULL COMMENT 'md5',
                                    `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '创建时间',
                                    `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '修改时间',
                                    `src_user` text COLLATE utf8_bin COMMENT 'source user',
                                    `src_ip` varchar(20) COLLATE utf8_bin DEFAULT NULL COMMENT 'source ip',
                                    `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
                                    PRIMARY KEY (`id`) USING BTREE,
                                    UNIQUE KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin ROW_FORMAT=DYNAMIC COMMENT='config_info_beta';

/*Data for the table `config_info_beta` */

/*Table structure for table `config_info_tag` */

DROP TABLE IF EXISTS `config_info_tag`;

CREATE TABLE `config_info_tag` (
                                   `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
                                   `data_id` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'data_id',
                                   `group_id` varchar(128) COLLATE utf8_bin NOT NULL COMMENT 'group_id',
                                   `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_id',
                                   `tag_id` varchar(128) COLLATE utf8_bin NOT NULL COMMENT 'tag_id',
                                   `app_name` varchar(128) COLLATE utf8_bin DEFAULT NULL COMMENT 'app_name',
                                   `content` longtext COLLATE utf8_bin NOT NULL COMMENT 'content',
                                   `md5` varchar(32) COLLATE utf8_bin DEFAULT NULL COMMENT 'md5',
                                   `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '创建时间',
                                   `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '修改时间',
                                   `src_user` text COLLATE utf8_bin COMMENT 'source user',
                                   `src_ip` varchar(20) COLLATE utf8_bin DEFAULT NULL COMMENT 'source ip',
                                   PRIMARY KEY (`id`) USING BTREE,
                                   UNIQUE KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin ROW_FORMAT=DYNAMIC COMMENT='config_info_tag';

/*Data for the table `config_info_tag` */

/*Table structure for table `config_tags_relation` */

DROP TABLE IF EXISTS `config_tags_relation`;

CREATE TABLE `config_tags_relation` (
                                        `id` bigint(20) NOT NULL COMMENT 'id',
                                        `tag_name` varchar(128) COLLATE utf8_bin NOT NULL COMMENT 'tag_name',
                                        `tag_type` varchar(64) COLLATE utf8_bin DEFAULT NULL COMMENT 'tag_type',
                                        `data_id` varchar(255) COLLATE utf8_bin NOT NULL COMMENT 'data_id',
                                        `group_id` varchar(128) COLLATE utf8_bin NOT NULL COMMENT 'group_id',
                                        `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_id',
                                        `nid` bigint(20) NOT NULL AUTO_INCREMENT,
                                        PRIMARY KEY (`nid`) USING BTREE,
                                        UNIQUE KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`) USING BTREE,
                                        KEY `idx_tenant_id` (`tenant_id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin ROW_FORMAT=DYNAMIC COMMENT='config_tag_relation';

/*Data for the table `config_tags_relation` */

/*Table structure for table `group_capacity` */

DROP TABLE IF EXISTS `group_capacity`;

CREATE TABLE `group_capacity` (
                                  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',
                                  `group_id` varchar(128) COLLATE utf8_bin NOT NULL DEFAULT '' COMMENT 'Group ID，空字符表示整个集群',
                                  `quota` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值',
                                  `usage` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '使用量',
                                  `max_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
                                  `max_aggr_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数，，0表示使用默认值',
                                  `max_aggr_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
                                  `max_history_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量',
                                  `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '创建时间',
                                  `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '修改时间',
                                  PRIMARY KEY (`id`) USING BTREE,
                                  UNIQUE KEY `uk_group_id` (`group_id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin ROW_FORMAT=DYNAMIC COMMENT='集群、各Group容量信息表';

/*Data for the table `group_capacity` */

/*Table structure for table `his_config_info` */

DROP TABLE IF EXISTS `his_config_info`;

CREATE TABLE `his_config_info` (
                                   `id` bigint(64) unsigned NOT NULL,
                                   `nid` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
                                   `data_id` varchar(255) COLLATE utf8_bin NOT NULL,
                                   `group_id` varchar(128) COLLATE utf8_bin NOT NULL,
                                   `app_name` varchar(128) COLLATE utf8_bin DEFAULT NULL COMMENT 'app_name',
                                   `content` longtext COLLATE utf8_bin NOT NULL,
                                   `md5` varchar(32) COLLATE utf8_bin DEFAULT NULL,
                                   `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00',
                                   `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00',
                                   `src_user` text COLLATE utf8_bin,
                                   `src_ip` varchar(20) COLLATE utf8_bin DEFAULT NULL,
                                   `op_type` char(10) COLLATE utf8_bin DEFAULT NULL,
                                   `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT '租户字段',
                                   PRIMARY KEY (`nid`) USING BTREE,
                                   KEY `idx_gmt_create` (`gmt_create`) USING BTREE,
                                   KEY `idx_gmt_modified` (`gmt_modified`) USING BTREE,
                                   KEY `idx_did` (`data_id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=111 DEFAULT CHARSET=utf8 COLLATE=utf8_bin ROW_FORMAT=DYNAMIC COMMENT='多租户改造';

/*Data for the table `his_config_info` */

insert  into `his_config_info`(`id`,`nid`,`data_id`,`group_id`,`app_name`,`content`,`md5`,`gmt_create`,`gmt_modified`,`src_user`,`src_ip`,`op_type`,`tenant_id`) values (0,98,'nebs-auth.yaml','DEFAULT_GROUP','nebs-auth','server:\r\n  port: 8101\r\n\r\nspring:\r\n  datasource:\r\n    dynamic:\r\n      hikari:\r\n        connection-timeout: 30000\r\n        max-lifetime: 1800000\r\n        max-pool-size: 15\r\n        min-idle: 5\r\n        connection-test-query: select 1\r\n        pool-name: NebsHikariCP\r\n      primary: base\r\n      datasource:\r\n        base:\r\n          username: root\r\n          password: root\r\n          driver-class-name: com.mysql.cj.jdbc.Driver\r\n          url: jdbc:mysql://${mysql.url}:3306/nebs_cloud_base?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2b8\r\n  redis:\r\n    database: 0\r\n    host: ${redis.url}\r\n    port: 6379\r\n    password: number47\r\n    lettuce:\r\n      pool:\r\n        min-idle: 8\r\n        max-idle: 500\r\n        max-active: 2000\r\n        max-wait: 10000\r\n      timeout: 5000\r\n  boot:\r\n    admin:\r\n      client:\r\n        url: http://${nebs-monitor-admin}:8401\r\n        username: nebs\r\n        password: 123456\r\n      instance:\r\n        prefer-ip: true\r\n        service-url: http://${nebs-auth}:8101\r\ninfo:\r\n  app:\r\n    name: ${spring.application.name}\r\n    description: \"@project.description@\"\r\n    version: \"@project.version@\"\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\' #将Spring Boot Admin客户端的所有监控端点都暴露给Spring Boot Admin服务端；\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS #总是展示详细的健康信息\r\n\r\n\r\nmybatis-plus:\r\n  type-aliases-package: entity.system #指定别名扫描路径，这个路径后续在nebs-common模块里定义，该路径下的实体类将自动配置别名，默认为类名首字母小写。配置别名后，便可以直接在MyBatis XML文件里使用了\r\n  mapper-locations: classpath:mapper/*.xml  #指定MyBatis XML文件路径\r\n  configuration:\r\n    jdbc-type-for-null: null #指定为null，否则再插入空值时会报“无效的列类型”错误；\r\n  global-config:\r\n    banner: false #设置为false关闭MyBatis Plus Banner打印\r\nlogging:\r\n  level:\r\n    org:\r\n      springframework:\r\n        boot:\r\n          actuate:\r\n            endpoint:\r\n              EndpointId: debug\r\n    com:\r\n      alibaba:\r\n          nacos:\r\n            client:\r\n              naming: warn','01d8a7b311e9d68efc65137e151f38a7','2010-05-05 00:00:00','2022-01-12 04:25:21',NULL,'192.168.33.1','I',''),(86,99,'nebs-auth.yaml','DEFAULT_GROUP','nebs-auth','server:\r\n  port: 8101\r\n\r\nspring:\r\n  datasource:\r\n    dynamic:\r\n      hikari:\r\n        connection-timeout: 30000\r\n        max-lifetime: 1800000\r\n        max-pool-size: 15\r\n        min-idle: 5\r\n        connection-test-query: select 1\r\n        pool-name: NebsHikariCP\r\n      primary: base\r\n      datasource:\r\n        base:\r\n          username: root\r\n          password: root\r\n          driver-class-name: com.mysql.cj.jdbc.Driver\r\n          url: jdbc:mysql://${mysql.url}:3306/nebs_cloud_base?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2b8\r\n  redis:\r\n    database: 0\r\n    host: ${redis.url}\r\n    port: 6379\r\n    password: number47\r\n    lettuce:\r\n      pool:\r\n        min-idle: 8\r\n        max-idle: 500\r\n        max-active: 2000\r\n        max-wait: 10000\r\n      timeout: 5000\r\n  boot:\r\n    admin:\r\n      client:\r\n        url: http://${nebs-monitor-admin}:8401\r\n        username: nebs\r\n        password: 123456\r\n      instance:\r\n        prefer-ip: true\r\n        service-url: http://${nebs-auth}:8101\r\ninfo:\r\n  app:\r\n    name: ${spring.application.name}\r\n    description: \"@project.description@\"\r\n    version: \"@project.version@\"\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\' #将Spring Boot Admin客户端的所有监控端点都暴露给Spring Boot Admin服务端；\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS #总是展示详细的健康信息\r\n\r\n\r\nmybatis-plus:\r\n  type-aliases-package: entity.system #指定别名扫描路径，这个路径后续在nebs-common模块里定义，该路径下的实体类将自动配置别名，默认为类名首字母小写。配置别名后，便可以直接在MyBatis XML文件里使用了\r\n  mapper-locations: classpath:mapper/*.xml  #指定MyBatis XML文件路径\r\n  configuration:\r\n    jdbc-type-for-null: null #指定为null，否则再插入空值时会报“无效的列类型”错误；\r\n  global-config:\r\n    banner: false #设置为false关闭MyBatis Plus Banner打印\r\nlogging:\r\n  level:\r\n    org:\r\n      springframework:\r\n        boot:\r\n          actuate:\r\n            endpoint:\r\n              EndpointId: debug\r\n    com:\r\n      alibaba:\r\n          nacos:\r\n            client:\r\n              naming: warn','01d8a7b311e9d68efc65137e151f38a7','2010-05-05 00:00:00','2022-01-12 05:01:02',NULL,'192.168.33.1','U',''),(0,100,'nebs-gateway.yaml','DEFAULT_GROUP','nebs-gateway','server:\r\n  port: 8301\r\n\r\nspring:\r\n  application:\r\n    name: NEBS-GATEWAY\r\n  autoconfigure:\r\n    exclude: org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\r\n                    org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration\r\n  boot:\r\n    admin:\r\n      client:\r\n        url: http://${nebs-monitor-admin}:8401\r\n        username: nebs\r\n        password: 123456\r\n      instance:\r\n        prefer-ip: true\r\n        service-url: http://${nebs-gateway}:8301\r\ninfo:\r\n  app:\r\n    name: ${spring.application.name}\r\n    description: \"@project.description@\"\r\n    version: \"@project.version@\"\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\' #将Spring Boot Admin客户端的所有监控端点都暴露给Spring Boot Admin服务端；\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS #总是展示详细的健康信息\r\neureka:\r\n  instance:\r\n    lease-renewal-interval-in-seconds: 20\r\n  client:\r\n    register-with-eureka: true\r\n    fetch-registry: true\r\n    instance-info-replication-interval-seconds: 30\r\n    registry-fetch-interval-seconds: 3\r\n    serviceUrl:\r\n      defaultZone: http://nebs:123456@${nebs-register}:8001/register/eureka/\r\nzuul:\r\n  SendErrorFilter: #让默认的异常过滤器失效，使用自定义异常过滤器\r\n    error:\r\n      disable: true\r\n  routes:\r\n    auth:\r\n      path: /auth/**\r\n      serviceId: NEBS-AUTH   #所有以/auth开头的请求都会被转发到名称为NEBS-Auth的服务上\r\n      sensitiveHeaders: \"*\"  #表示不过滤请求头信息,即请求的请求头信息将原封不动的转发出去\r\n    system:\r\n      path: /system/**\r\n      serviceId: NEBS-SERVER-SYSTEM\r\n      sensitiveHeaders: \"*\"\r\n    test:\r\n      path: /test/**\r\n      serviceId: NEBS-SERVER-TEST\r\n      sensitiveHeaders: \"*\"\r\n  retryable: true            #设置为true时，表示开启重试机制\r\n  ignored-services: \"*\"      #Zuul配合Eureka后会有一套默认的配置规则，这里我们只想请求根据我们显示配置的路由规则走，所以设置为*，表示关闭所有默认路由配置规则\r\n  ribbon:\r\n    eager-load:\r\n      enabled: true          #Zuul内部通过Ribbon按照一定的负载均衡算法来获取服务，Ribbon进行客户端负载均衡的Client并不是在服务启动的时候就初始化好的，\r\n                             #而是在调用的时候才会去创建相应的Client，所以第一次调用的耗时不仅仅包含发送HTTP请求的时间，\r\n                             #还包含了创建RibbonClient的时间，这样一来如果创建时间速度较慢，同时设置的超时时间又比较短的话，\r\n                             #第一次请求很容易出现超时的情况。设置为true的时候表示开启Ribbon的饥饿加载模式，即在应用启动的时候就去获取相应的Client备用\r\n\r\nribbon:\r\n  ReadTimeout: 3000          #设置请求超时时间，单位为毫秒\r\n','f82f7a2142c59134c60a69a5be602043','2010-05-05 00:00:00','2022-01-12 16:27:42',NULL,'192.168.33.1','I',''),(0,101,'nebs-monitor-admin.yaml','DEFAULT_GROUP','nebs-monitor-admin','server:\r\n  port: 8401\r\n\r\nspring:\r\n  application:\r\n    name: NEBS-MONITOR-ADMIN\r\n  security:\r\n    user:\r\n      name: nebs\r\n      password: 123456\r\n  boot:\r\n    admin:\r\n      ui:\r\n        title: ${spring.application.name}\r\n      instance:\r\n        prefer-ip: true\r\n        service-url: http://${nebs-monitor-admin}:8401\r\n\r\n','8f1aa36ada7d84ff2e1dad4ad4e8f59c','2010-05-05 00:00:00','2022-01-12 16:29:05',NULL,'192.168.33.1','I',''),(0,102,'nebs-server-system.yaml','DEFAULT_GROUP','nebs-server-system','server:\r\n  port: 8201\r\n\r\nspring:\r\n  application:\r\n    name: NEBS-SERVER-SYSTEM\r\n  autoconfigure:\r\n    exclude: org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration\r\n  datasource:\r\n    dynamic:\r\n      p6spy: true\r\n      hikari:\r\n        connection-timeout: 30000\r\n        max-lifetime: 1800000\r\n        max-pool-size: 15\r\n        min-idle: 5\r\n        connection-test-query: select 1\r\n        pool-name: NebsHikariCP\r\n      primary: base\r\n      datasource:\r\n        base:\r\n          username: root\r\n          password: 123456\r\n          driver-class-name: com.mysql.cj.jdbc.Driver\r\n          url: jdbc:mysql://${mysql.url}:3306/nebs_cloud_base?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2b8\r\n  boot:\r\n    admin:\r\n      client:\r\n        url: http://${nebs-monitor-admin}:8401\r\n        username: nebs\r\n        password: 123456\r\n      instance:\r\n        prefer-ip: true\r\n        service-url: http://${nebs-server-system}:8201\r\n  zipkin:\r\n    sender:\r\n      type: rabbit\r\n  sleuth:\r\n    sampler:\r\n      probability: 1\r\n  rabbitmq:\r\n    host: ${rabbitmq.url}\r\n    port: 5672\r\n    username: nebs\r\n    password: 123456\r\ninfo:\r\n  app:\r\n    name: ${spring.application.name}\r\n    description: \"@project.description@\"\r\nversion: \"@project.version@\"\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\' #将Spring Boot Admin客户端的所有监控端点都暴露给Spring Boot Admin服务端；\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS #总是展示详细的健康信息\r\nsecurity:\r\n  oauth2:\r\n    resource:\r\n      id: ${spring.application.name}\r\n      user-info-uri: http://${nebs-gateway}:8301/auth/user  #1.到认证服务器里校验当前请求头中的令牌是否为合法的令牌；\r\n                                                      #2.通过当前令牌获取对应的用户信息。\r\n\r\neureka:\r\n  instance:\r\n    lease-renewal-interval-in-seconds: 20\r\n  client:\r\n    register-with-eureka: true\r\n    fetch-registry: true\r\n    instance-info-replication-interval-seconds: 30\r\n    serviceUrl:\r\n      defaultZone: http://nebs:123456@${nebs-register}:8001/register/eureka/\r\n\r\nmybatis-plus:\r\n  type-aliases-package: entity.system\r\n  mapper-locations: classpath:mapper/*/*.xml\r\n  configuration:\r\n    jdbc-type-for-null: null\r\n  global-config:\r\n    banner: false\r\n','eb7e3d6c393d7a6f3de50045d181dae9','2010-05-05 00:00:00','2022-01-12 16:30:05',NULL,'192.168.33.1','I',''),(0,103,'nebs-server-test.yaml','DEFAULT_GROUP','nebs-server-test','server:\r\n  port: 8202\r\n\r\nspring:\r\n  application:\r\n    name: NEBS-SERVER-TEST\r\n  autoconfigure:\r\n    exclude: org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\r\n                   com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration,\r\n                   org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration\r\n  boot:\r\n    admin:\r\n      client:\r\n        url: http://${nebs-monitor-admin}:8401\r\n        username: nebs\r\n        password: 123456\r\n  zipkin:\r\n    sender:\r\n      type: rabbit #指定了使用RabbitMQ收集追踪信息\r\n  sleuth:\r\n    sampler:\r\n      probability: 1 #默认值为0.1，即采样率才1/10，发送10笔请求只有一笔会被采集。为了测试方便，我们可以将它设置为1，即100%采样；\r\n  rabbitmq:\r\n    host: ${rabbitmq.url}\r\n    port: 5672  #5672是RabbitMQ的管理页面端口，5672是AMPQ端口\r\n    username: nebs\r\n    password: 123456\r\n\r\ninfo:\r\n  app:\r\n    name: ${spring.application.name}\r\n    description: \"@project.description@\"\r\n    version: \"@project.version@\"\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\' #将Spring Boot Admin客户端的所有监控端点都暴露给Spring Boot Admin服务端；\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS #总是展示详细的健康信息\r\n\r\neureka:\r\n  instance:\r\n    lease-renewal-interval-in-seconds: 20\r\n  client:\r\n    register-with-eureka: true\r\n    fetch-registry: true\r\n    instance-info-replication-interval-seconds: 30\r\n    registry-fetch-interval-seconds: 3\r\n    serviceUrl:\r\n      defaultZone: http://nebs:123456@${nebs-register}:8001/register/eureka/\r\nsecurity:\r\n  oauth2:\r\n    resource:\r\n      id: ${spring.application.name}\r\n      user-info-uri: http://${nebs-gateway}:8301/auth/user\r\nfeign:\r\n  hystrix:\r\n    enabled: true\r\nhystrix:\r\n  shareSecurityContext: true #把SecurityContext对象从你当前主线程传输到Hystrix线程\r\n','a988a2226d7f5a942ead7fefb3fabc6c','2010-05-05 00:00:00','2022-01-12 16:30:57',NULL,'192.168.33.1','I',''),(0,104,'nebs-spring-gateway.yaml','DEFAULT_GROUP','nebs-spring-gateway','server:\r\n  port: 8301\r\nspring:\r\n  main:\r\n    allow-bean-definition-overriding: true\r\n  application:\r\n    name: NEBS-SPRING-GATEWAY\r\n  cloud: ## 路由规则\r\n    gateway:\r\n      routes:\r\n        - id: NEBS-AUTH\r\n          uri: lb://NEBS-AUTH\r\n          predicates:\r\n            - Path=/auth/**\r\n        - id: NEBS-SERVER-SYSTEM\r\n          uri: lb://NEBS-SERVER-SYSTEM\r\n          predicates:\r\n            - Path=/system/**\r\n        - id: NEBS-SERVER-TEST\r\n          uri: lb://NEBS-SERVER-TEST #uri配置为lb://NEBS-Server-Test的含义是，满足转发条件后，请求将均衡的转发到NEBS-Server-Test微服务上\r\n          predicates:\r\n            - Path=/test/** #请求Path以/auth开头的都会被匹配\r\n      default-filters:\r\n        - StripPrefix=0 #请求转发前，将Path的内容截去前面一位,比如/auth/hello会被截取为/hello\r\n  boot:\r\n    admin:\r\n      client:\r\n        url: http://${nebs-monitor-admin}:8401\r\n        username: nebs\r\n        password: 123456\r\n\r\neureka:\r\n  instance:\r\n    lease-renewal-interval-in-seconds: 20\r\n  client:\r\n    register-with-eureka: true\r\n    fetch-registry: true\r\n    instance-info-replication-interval-seconds: 30\r\n    registry-fetch-interval-seconds: 3\r\n    serviceUrl:\r\n      defaultZone: http://nebs:123456@${nebs-register}:8001/register/eureka/\r\n\r\nmanagement:\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: health,info,gateway\r\nlogging:\r\n  level:\r\n    org:\r\n      springframework:\r\n        boot:\r\n          actuate:\r\n            endpoint:\r\n              EndpointId: debug\r\n        data:\r\n          convert:\r\n            CustomConversions: debug\r\n','0fb60f9cc21c11aef2b51b7ace9fbaea','2010-05-05 00:00:00','2022-01-12 16:31:32',NULL,'192.168.33.1','I',''),(92,105,'nebs-spring-gateway.yaml','DEFAULT_GROUP','nebs-spring-gateway','server:\r\n  port: 8301\r\nspring:\r\n  main:\r\n    allow-bean-definition-overriding: true\r\n  application:\r\n    name: NEBS-SPRING-GATEWAY\r\n  cloud: ## 路由规则\r\n    gateway:\r\n      routes:\r\n        - id: NEBS-AUTH\r\n          uri: lb://NEBS-AUTH\r\n          predicates:\r\n            - Path=/auth/**\r\n        - id: NEBS-SERVER-SYSTEM\r\n          uri: lb://NEBS-SERVER-SYSTEM\r\n          predicates:\r\n            - Path=/system/**\r\n        - id: NEBS-SERVER-TEST\r\n          uri: lb://NEBS-SERVER-TEST #uri配置为lb://NEBS-Server-Test的含义是，满足转发条件后，请求将均衡的转发到NEBS-Server-Test微服务上\r\n          predicates:\r\n            - Path=/test/** #请求Path以/auth开头的都会被匹配\r\n      default-filters:\r\n        - StripPrefix=0 #请求转发前，将Path的内容截去前面一位,比如/auth/hello会被截取为/hello\r\n  boot:\r\n    admin:\r\n      client:\r\n        url: http://${nebs-monitor-admin}:8401\r\n        username: nebs\r\n        password: 123456\r\n\r\neureka:\r\n  instance:\r\n    lease-renewal-interval-in-seconds: 20\r\n  client:\r\n    register-with-eureka: true\r\n    fetch-registry: true\r\n    instance-info-replication-interval-seconds: 30\r\n    registry-fetch-interval-seconds: 3\r\n    serviceUrl:\r\n      defaultZone: http://nebs:123456@${nebs-register}:8001/register/eureka/\r\n\r\nmanagement:\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: health,info,gateway\r\nlogging:\r\n  level:\r\n    org:\r\n      springframework:\r\n        boot:\r\n          actuate:\r\n            endpoint:\r\n              EndpointId: debug\r\n        data:\r\n          convert:\r\n            CustomConversions: debug\r\n','0fb60f9cc21c11aef2b51b7ace9fbaea','2010-05-05 00:00:00','2022-01-12 16:31:56',NULL,'192.168.33.1','U',''),(86,106,'nebs-auth.yaml','DEFAULT_GROUP','nebs-auth','server:\r\n  port: 8101\r\n\r\nspring:\r\n  datasource:\r\n    dynamic:\r\n      hikari:\r\n        connection-timeout: 30000\r\n        max-lifetime: 1800000\r\n        max-pool-size: 15\r\n        min-idle: 5\r\n        connection-test-query: select 1\r\n        pool-name: NebsHikariCP\r\n      primary: base\r\n      datasource:\r\n        base:\r\n          username: root\r\n          password: 123456\r\n          driver-class-name: com.mysql.cj.jdbc.Driver\r\n          url: jdbc:mysql://${mysql.url}:3306/nebs_cloud_base?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2b8\r\n  redis:\r\n    database: 0\r\n    host: ${redis.url}\r\n    port: 6379\r\n    password: number47\r\n    lettuce:\r\n      pool:\r\n        min-idle: 8\r\n        max-idle: 500\r\n        max-active: 2000\r\n        max-wait: 10000\r\n      timeout: 5000\r\n  boot:\r\n    admin:\r\n      client:\r\n        url: http://${nebs-monitor-admin}:8401\r\n        username: nebs\r\n        password: 123456\r\n      instance:\r\n        prefer-ip: true\r\n        service-url: http://${nebs-auth}:8101\r\ninfo:\r\n  app:\r\n    name: ${spring.application.name}\r\n    description: \"@project.description@\"\r\n    version: \"@project.version@\"\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\' #将Spring Boot Admin客户端的所有监控端点都暴露给Spring Boot Admin服务端；\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS #总是展示详细的健康信息\r\n\r\n\r\nmybatis-plus:\r\n  type-aliases-package: entity.system #指定别名扫描路径，这个路径后续在nebs-common模块里定义，该路径下的实体类将自动配置别名，默认为类名首字母小写。配置别名后，便可以直接在MyBatis XML文件里使用了\r\n  mapper-locations: classpath:mapper/*.xml  #指定MyBatis XML文件路径\r\n  configuration:\r\n    jdbc-type-for-null: null #指定为null，否则再插入空值时会报“无效的列类型”错误；\r\n  global-config:\r\n    banner: false #设置为false关闭MyBatis Plus Banner打印\r\nlogging:\r\n  level:\r\n    org:\r\n      springframework:\r\n        boot:\r\n          actuate:\r\n            endpoint:\r\n              EndpointId: debug\r\n    com:\r\n      alibaba:\r\n          nacos:\r\n            client:\r\n              naming: warn','58e058e4bc201aebf7850f21aae6ee7a','2010-05-05 00:00:00','2022-01-12 17:05:17',NULL,'192.168.33.1','U',''),(92,107,'nebs-spring-gateway.yaml','DEFAULT_GROUP','nebs-spring-gateway','server:\r\n  port: 8301\r\nspring:\r\n  main:\r\n    allow-bean-definition-overriding: true\r\n  application:\r\n    name: NEBS-SPRING-GATEWAY\r\n  cloud: ## 路由规则\r\n    gateway:\r\n      routes:\r\n        - id: NEBS-AUTH\r\n          uri: lb://NEBS-AUTH\r\n          predicates:\r\n            - Path=/auth/**\r\n        - id: NEBS-SERVER-SYSTEM\r\n          uri: lb://NEBS-SERVER-SYSTEM\r\n          predicates:\r\n            - Path=/system/**\r\n        - id: NEBS-SERVER-TEST\r\n          uri: lb://NEBS-SERVER-TEST #uri配置为lb://NEBS-Server-Test的含义是，满足转发条件后，请求将均衡的转发到NEBS-Server-Test微服务上\r\n          predicates:\r\n            - Path=/test/** #请求Path以/auth开头的都会被匹配\r\n      default-filters:\r\n        - StripPrefix=0 #请求转发前，将Path的内容截去前面一位,比如/auth/hello会被截取为/hello\r\n  boot:\r\n    admin:\r\n      client:\r\n        url: http://${nebs-monitor-admin}:8401\r\n        username: nebs\r\n        password: 123456\r\n\r\neureka:\r\n  instance:\r\n    lease-renewal-interval-in-seconds: 20\r\n  client:\r\n    register-with-eureka: true\r\n    fetch-registry: true\r\n    instance-info-replication-interval-seconds: 30\r\n    registry-fetch-interval-seconds: 3\r\n    serviceUrl:\r\n      defaultZone: http://nebs:123456@${nebs-register}:8001/register/eureka/\r\n\r\nmanagement:\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: health,info,gateway\r\nlogging:\r\n  level:\r\n    org:\r\n      springframework:\r\n        boot:\r\n          actuate:\r\n            endpoint:\r\n              EndpointId: debug\r\n        data:\r\n          convert:\r\n            CustomConversions: debug\r\n','0fb60f9cc21c11aef2b51b7ace9fbaea','2010-05-05 00:00:00','2022-01-12 17:13:39',NULL,'192.168.33.1','U',''),(86,108,'nebs-auth.yaml','DEFAULT_GROUP','NEBS-AUTH','server:\r\n  port: 8101\r\n\r\nspring:\r\n  datasource:\r\n    dynamic:\r\n      hikari:\r\n        connection-timeout: 30000\r\n        max-lifetime: 1800000\r\n        max-pool-size: 15\r\n        min-idle: 5\r\n        connection-test-query: select 1\r\n        pool-name: NebsHikariCP\r\n      primary: base\r\n      datasource:\r\n        base:\r\n          username: root\r\n          password: 123456\r\n          driver-class-name: com.mysql.cj.jdbc.Driver\r\n          url: jdbc:mysql://${mysql.url}:3306/nebs_cloud_base?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2b8\r\n  redis:\r\n    database: 0\r\n    host: ${redis.url}\r\n    port: 6379\r\n    password: number47\r\n    lettuce:\r\n      pool:\r\n        min-idle: 8\r\n        max-idle: 500\r\n        max-active: 2000\r\n        max-wait: 10000\r\n      timeout: 5000\r\n  boot:\r\n    admin:\r\n      client:\r\n        url: http://${nebs-monitor-admin}:8401\r\n        username: nebs\r\n        password: 123456\r\n      instance:\r\n        prefer-ip: true\r\n        service-url: http://${nebs-auth}:8101\r\ninfo:\r\n  app:\r\n    name: ${spring.application.name}\r\n    description: \"@project.description@\"\r\n    version: \"@project.version@\"\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\' #将Spring Boot Admin客户端的所有监控端点都暴露给Spring Boot Admin服务端；\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS #总是展示详细的健康信息\r\n\r\n\r\nmybatis-plus:\r\n  type-aliases-package: entity.system #指定别名扫描路径，这个路径后续在nebs-common模块里定义，该路径下的实体类将自动配置别名，默认为类名首字母小写。配置别名后，便可以直接在MyBatis XML文件里使用了\r\n  mapper-locations: classpath:mapper/*.xml  #指定MyBatis XML文件路径\r\n  configuration:\r\n    jdbc-type-for-null: null #指定为null，否则再插入空值时会报“无效的列类型”错误；\r\n  global-config:\r\n    banner: false #设置为false关闭MyBatis Plus Banner打印\r\nlogging:\r\n  level:\r\n    org:\r\n      springframework:\r\n        boot:\r\n          actuate:\r\n            endpoint:\r\n              EndpointId: debug\r\n    com:\r\n      alibaba:\r\n          nacos:\r\n            client:\r\n              naming: warn','58e058e4bc201aebf7850f21aae6ee7a','2010-05-05 00:00:00','2022-01-12 17:34:46',NULL,'192.168.33.1','U',''),(90,109,'nebs-server-system.yaml','DEFAULT_GROUP','nebs-server-system','server:\r\n  port: 8201\r\n\r\nspring:\r\n  application:\r\n    name: NEBS-SERVER-SYSTEM\r\n  autoconfigure:\r\n    exclude: org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration\r\n  datasource:\r\n    dynamic:\r\n      p6spy: true\r\n      hikari:\r\n        connection-timeout: 30000\r\n        max-lifetime: 1800000\r\n        max-pool-size: 15\r\n        min-idle: 5\r\n        connection-test-query: select 1\r\n        pool-name: NebsHikariCP\r\n      primary: base\r\n      datasource:\r\n        base:\r\n          username: root\r\n          password: 123456\r\n          driver-class-name: com.mysql.cj.jdbc.Driver\r\n          url: jdbc:mysql://${mysql.url}:3306/nebs_cloud_base?useUnicode=true&characterEncoding=UTF-8&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=GMT%2b8\r\n  boot:\r\n    admin:\r\n      client:\r\n        url: http://${nebs-monitor-admin}:8401\r\n        username: nebs\r\n        password: 123456\r\n      instance:\r\n        prefer-ip: true\r\n        service-url: http://${nebs-server-system}:8201\r\n  zipkin:\r\n    sender:\r\n      type: rabbit\r\n  sleuth:\r\n    sampler:\r\n      probability: 1\r\n  rabbitmq:\r\n    host: ${rabbitmq.url}\r\n    port: 5672\r\n    username: nebs\r\n    password: 123456\r\ninfo:\r\n  app:\r\n    name: ${spring.application.name}\r\n    description: \"@project.description@\"\r\nversion: \"@project.version@\"\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\' #将Spring Boot Admin客户端的所有监控端点都暴露给Spring Boot Admin服务端；\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS #总是展示详细的健康信息\r\nsecurity:\r\n  oauth2:\r\n    resource:\r\n      id: ${spring.application.name}\r\n      user-info-uri: http://${nebs-gateway}:8301/auth/user  #1.到认证服务器里校验当前请求头中的令牌是否为合法的令牌；\r\n                                                      #2.通过当前令牌获取对应的用户信息。\r\n\r\neureka:\r\n  instance:\r\n    lease-renewal-interval-in-seconds: 20\r\n  client:\r\n    register-with-eureka: true\r\n    fetch-registry: true\r\n    instance-info-replication-interval-seconds: 30\r\n    serviceUrl:\r\n      defaultZone: http://nebs:123456@${nebs-register}:8001/register/eureka/\r\n\r\nmybatis-plus:\r\n  type-aliases-package: entity.system\r\n  mapper-locations: classpath:mapper/*/*.xml\r\n  configuration:\r\n    jdbc-type-for-null: null\r\n  global-config:\r\n    banner: false\r\n','eb7e3d6c393d7a6f3de50045d181dae9','2010-05-05 00:00:00','2022-01-12 17:36:27',NULL,'192.168.33.1','U',''),(91,110,'nebs-server-test.yaml','DEFAULT_GROUP','nebs-server-test','server:\r\n  port: 8202\r\n\r\nspring:\r\n  application:\r\n    name: NEBS-SERVER-TEST\r\n  autoconfigure:\r\n    exclude: org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\r\n                   com.baomidou.dynamic.datasource.spring.boot.autoconfigure.DynamicDataSourceAutoConfiguration,\r\n                   org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration\r\n  boot:\r\n    admin:\r\n      client:\r\n        url: http://${nebs-monitor-admin}:8401\r\n        username: nebs\r\n        password: 123456\r\n  zipkin:\r\n    sender:\r\n      type: rabbit #指定了使用RabbitMQ收集追踪信息\r\n  sleuth:\r\n    sampler:\r\n      probability: 1 #默认值为0.1，即采样率才1/10，发送10笔请求只有一笔会被采集。为了测试方便，我们可以将它设置为1，即100%采样；\r\n  rabbitmq:\r\n    host: ${rabbitmq.url}\r\n    port: 5672  #5672是RabbitMQ的管理页面端口，5672是AMPQ端口\r\n    username: nebs\r\n    password: 123456\r\n\r\ninfo:\r\n  app:\r\n    name: ${spring.application.name}\r\n    description: \"@project.description@\"\r\n    version: \"@project.version@\"\r\nmanagement:\r\n  endpoints:\r\n    web:\r\n      exposure:\r\n        include: \'*\' #将Spring Boot Admin客户端的所有监控端点都暴露给Spring Boot Admin服务端；\r\n  endpoint:\r\n    health:\r\n      show-details: ALWAYS #总是展示详细的健康信息\r\n\r\neureka:\r\n  instance:\r\n    lease-renewal-interval-in-seconds: 20\r\n  client:\r\n    register-with-eureka: true\r\n    fetch-registry: true\r\n    instance-info-replication-interval-seconds: 30\r\n    registry-fetch-interval-seconds: 3\r\n    serviceUrl:\r\n      defaultZone: http://nebs:123456@${nebs-register}:8001/register/eureka/\r\nsecurity:\r\n  oauth2:\r\n    resource:\r\n      id: ${spring.application.name}\r\n      user-info-uri: http://${nebs-gateway}:8301/auth/user\r\nfeign:\r\n  hystrix:\r\n    enabled: true\r\nhystrix:\r\n  shareSecurityContext: true #把SecurityContext对象从你当前主线程传输到Hystrix线程\r\n','a988a2226d7f5a942ead7fefb3fabc6c','2010-05-05 00:00:00','2022-01-12 17:36:47',NULL,'192.168.33.1','U','');

/*Table structure for table `permissions` */

DROP TABLE IF EXISTS `permissions`;

CREATE TABLE `permissions` (
                               `role` varchar(50) NOT NULL,
                               `resource` varchar(512) NOT NULL,
                               `action` varchar(8) NOT NULL,
                               UNIQUE KEY `uk_role_permission` (`role`,`resource`,`action`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

/*Data for the table `permissions` */

/*Table structure for table `roles` */

DROP TABLE IF EXISTS `roles`;

CREATE TABLE `roles` (
                         `username` varchar(50) NOT NULL,
                         `role` varchar(50) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

/*Data for the table `roles` */

insert  into `roles`(`username`,`role`) values ('nebs','ROLE_ADMIN');

/*Table structure for table `tenant_capacity` */

DROP TABLE IF EXISTS `tenant_capacity`;

CREATE TABLE `tenant_capacity` (
                                   `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '主键ID',
                                   `tenant_id` varchar(128) COLLATE utf8_bin NOT NULL DEFAULT '' COMMENT 'Tenant ID',
                                   `quota` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '配额，0表示使用默认值',
                                   `usage` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '使用量',
                                   `max_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个配置大小上限，单位为字节，0表示使用默认值',
                                   `max_aggr_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '聚合子配置最大个数',
                                   `max_aggr_size` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值',
                                   `max_history_count` int(10) unsigned NOT NULL DEFAULT '0' COMMENT '最大变更历史数量',
                                   `gmt_create` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '创建时间',
                                   `gmt_modified` datetime NOT NULL DEFAULT '2010-05-05 00:00:00' COMMENT '修改时间',
                                   PRIMARY KEY (`id`) USING BTREE,
                                   UNIQUE KEY `uk_tenant_id` (`tenant_id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin ROW_FORMAT=DYNAMIC COMMENT='租户容量信息表';

/*Data for the table `tenant_capacity` */

/*Table structure for table `tenant_info` */

DROP TABLE IF EXISTS `tenant_info`;

CREATE TABLE `tenant_info` (
                               `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT 'id',
                               `kp` varchar(128) COLLATE utf8_bin NOT NULL COMMENT 'kp',
                               `tenant_id` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_id',
                               `tenant_name` varchar(128) COLLATE utf8_bin DEFAULT '' COMMENT 'tenant_name',
                               `tenant_desc` varchar(256) COLLATE utf8_bin DEFAULT NULL COMMENT 'tenant_desc',
                               `create_source` varchar(32) COLLATE utf8_bin DEFAULT NULL COMMENT 'create_source',
                               `gmt_create` bigint(20) NOT NULL COMMENT '创建时间',
                               `gmt_modified` bigint(20) NOT NULL COMMENT '修改时间',
                               PRIMARY KEY (`id`) USING BTREE,
                               UNIQUE KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`) USING BTREE,
                               KEY `idx_tenant_id` (`tenant_id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin ROW_FORMAT=DYNAMIC COMMENT='tenant_info';

/*Data for the table `tenant_info` */

/*Table structure for table `users` */

DROP TABLE IF EXISTS `users`;

CREATE TABLE `users` (
                         `username` varchar(50) NOT NULL,
                         `password` varchar(500) NOT NULL,
                         `enabled` tinyint(1) NOT NULL,
                         PRIMARY KEY (`username`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;

/*Data for the table `users` */
/*123456*/
insert  into `users`(`username`,`password`,`enabled`) values ('nebs','$2a$10$NJRJ.JUIUVX5suXNFRuOFezX5nzQLxl86OyMNnA7yxH1zr94H/gBS',1);

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
